local get_yanked_paths = ya.sync(function(state)
	local paths = {}
	for _, v in pairs(cx.yanked) do
		if not v.is_regular then
			goto continue
		end
		table.insert(paths, tostring(v))
		::continue::
	end
	return paths
end)

local M = {
	notify_unknown_display_server = false,
}

function M:entry(job)
	ya.dbg("Clipboard", "args", job.args)
	self.notify_unknown_display_server = job.args.notify_unknown_display_server or false

	if job.args.action == "copy" then
		return self:copy()
	elseif job.args.action == "paste" then
		return self:notify_error("Paste action is not implemented yet")
	else
		return self:notify_error("Unknown action: " .. tostring(job.args.action))
	end
end

function M:copy()
	local paths = get_yanked_paths()
	ya.dbg("Clipboard", "files", paths)
	if #paths == 0 then
		return self:notify_error("No files to copy")
	end

	local cmd, err = nil, nil
	if ya.target_os() == "linux" then
		cmd, err = self:copy_linux_cmd()
	elseif ya.target_os() == "macos" then
		cmd, err = self:copy_macos_cmd()
	else
		err = "Unsupported OS: " .. ya.target_os()
	end
	if not self.notify_unknown_display_server and err == "Unknown display server" then
		return
	end
	if err then
		return self:notify_error("Copy failed: " .. err)
	end

	ya.dbg("Clipboard", "cmd", cmd)
	local cmd = Command("sh"):arg({ "-c", cmd, "--" }):arg(paths)
	local output, err = cmd:output()
	if err then
		ya.err("Clipboard", "cmd failed", err)
		return self:notify_error("Run command failed: " .. tostring(err))
	end
	if output then
		ya.dbg("Clipboard", "cmd output", output.status.code, output.stdout, output.stderr)
	end
end

function M:copy_linux_cmd()
	if self:linux_display_server() == "x11" then
		return self:copy_x11_cmd()
	elseif self:linux_display_server() == "wayland" then
		return self:copy_wayland_cmd()
	else
		return nil, "Unknown display server"
	end
end

function M:copy_macos_cmd()
	-- Generated by GPT-5-Codex
	cmd = [[osascript - "$@" <<END_SCRIPT
use framework "Foundation"
use framework "AppKit"
use scripting additions

on run argv
  set pasteboard to (current application's NSPasteboard's generalPasteboard())
  pasteboard's clearContents()

  set urlArray to (current application's NSMutableArray's array())
  repeat with path in argv
    set nsPath to (current application's NSString's stringWithString_(path))
    set nsURL to (current application's |NSURL|'s fileURLWithPath_(nsPath))
    (urlArray's addObject_(nsURL))
  end repeat
  pasteboard's writeObjects_(urlArray)

  set previousDelimiters to AppleScript's text item delimiters
  set AppleScript's text item delimiters to linefeed
  set joinedPaths to (argv as text)
  set AppleScript's text item delimiters to previousDelimiters

  set joinedString to (current application's NSString's stringWithString_(joinedPaths))
  pasteboard's setString_forType_(joinedString, current application's NSPasteboardTypeString)
end run
END_SCRIPT]]
	return cmd, nil
end

function M:linux_display_server()
	local xdg_session_type = os.getenv("XDG_SESSION_TYPE")
	if xdg_session_type == "wayland" or xdg_session_type == "x11" then
		return xdg_session_type
	end
	if os.getenv("WAYLAND_DISPLAY") then
		return "wayland"
	end
	if os.getenv("DISPLAY") then
		return "x11"
	end

	return "unknown"
end

function M:copy_x11_cmd()
	local status, err = Command("which"):arg("xclip"):status()
	if err then
		ya.err("Clipboard", "which xclip failed", err)
		return nil, "xclip not found"
	end
	if not (status and status.success) then
		return nil, "xclip not found"
	end
	return [[echo "$@" | xclip -i -selection clipboard -t text/uri-list]], nil
end

function M:copy_wayland_cmd()
	local status, err = Command("which"):arg("wl-copy"):status()
	if err then
		ya.err("Clipboard", "which wl-copy failed", err)
		return nil, "wl-copy not found"
	end
	if not (status and status.success) then
		return nil, "wl-copy not found"
	end
	return [[for path in "$@"; do echo "file://$path"; done | wl-copy -t text/uri-list]], nil
end

function M:notify_error(msg)
	ya.notify({ title = "Clipboard", content = msg, timeout = 6.5, level = "error" })
end

return M
